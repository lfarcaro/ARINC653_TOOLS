MASK_START
SNIPPET_START CREATE_ERROR_HANDLER_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START CREATE_PARTITION_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START CREATE_PROCESS_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START GET_ERROR_STATUS_ERROR_HANDLING_CODE
			while (true) {
			}
SNIPPET_END
SNIPPET_START GLOBAL_INCLUDES
// Test include
#include "test.h"
SNIPPET_END
SNIPPET_START MODULE_MODULE_DEFAULTPARTITION_INITIALIZATION
	// Enters core
	ENTER_CORE();

	// Checks current context system state
	if (_CORE_CURRENT_CONTEXT->SYSTEM_STATE != SYSTEMSTATE_OPERATINGSYSTEM) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Checks current context default system state
	if (_CORE_CURRENT_CONTEXT->DEFAULT_SYSTEM_STATE != SYSTEMSTATE_MODULEDEFAULTPARTITION) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Exits core
	EXIT_CORE();
SNIPPET_END
SNIPPET_START MODULE_MODULE_DEFAULTPARTITION_VARIABLES
	portBYTE COMMAND;
SNIPPET_END
SNIPPET_START MODULE_MODULE_DESCRIPTION
SNIPPET_END
SNIPPET_START MODULE_MODULE_FUNCTIONS
SNIPPET_END
SNIPPET_START MODULE_MODULE_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START MODULE_MODULE_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START MODULE_MODULE_HEALTHMONITORINGCALLBACK_CODE
	// Enters core
	ENTER_CORE();

	// Checks current context system state
	if (_CORE_CURRENT_CONTEXT->SYSTEM_STATE != SYSTEMSTATE_OPERATINGSYSTEM) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Checks current context default system state
	if (_CORE_CURRENT_CONTEXT->DEFAULT_SYSTEM_STATE != SYSTEMSTATE_MODULEHEALTHMONITORINGCALLBACK) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Exits core
	EXIT_CORE();

	// Raises application error
	RAISE_APPLICATION_ERROR(APPLICATION_ERROR, (MESSAGE_ADDR_TYPE) "FROM MODULE HM CALLBACK", 23, &RETURN_CODE);
	if (RETURN_CODE != NO_ERROR) {
		while (true) {
		}
	}
SNIPPET_END
SNIPPET_START MODULE_MODULE_HEALTHMONITORINGCALLBACK_VARIABLES
	RETURN_CODE_TYPE RETURN_CODE;
SNIPPET_END
SNIPPET_START MODULE_MODULE_IDLEPARTITION_CODE
		// Enters core
		ENTER_CORE();

		// Checks current context system state
		if (_CORE_CURRENT_CONTEXT->SYSTEM_STATE != SYSTEMSTATE_OPERATINGSYSTEM) {
			while (true) {
				TEST_LED1_ON();
				TEST_LED2_ON();
			}
		}

		// Checks current context default system state
		if (_CORE_CURRENT_CONTEXT->DEFAULT_SYSTEM_STATE != SYSTEMSTATE_MODULEIDLEPARTITION) {
			while (true) {
				TEST_LED1_ON();
				TEST_LED2_ON();
			}
		}

		// Exits core
		EXIT_CORE();

		// Handles reset command
		if ((CONSOLE_READ_BYTE(&COMMAND)) && (COMMAND == 0)) {
			PORT_RESTARTMODULE();
		}
SNIPPET_END
SNIPPET_START MODULE_MODULE_IDLEPARTITION_INITIALIZATION
SNIPPET_END
SNIPPET_START MODULE_MODULE_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DEFAULTPROCESS_INITIALIZATION
	// Enters core
	ENTER_CORE();

	// Checks current context system state
	if (_CORE_CURRENT_CONTEXT->SYSTEM_STATE != SYSTEMSTATE_OPERATINGSYSTEM) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Checks current context default system state
	if (_CORE_CURRENT_CONTEXT->DEFAULT_SYSTEM_STATE != SYSTEMSTATE_PARTITIONDEFAULTPROCESS) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Exits core
	EXIT_CORE();
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_ERRORHANDLER_CODE
		// Enters core
		ENTER_CORE();

		// Checks current context system state
		if (_CORE_CURRENT_CONTEXT->SYSTEM_STATE != SYSTEMSTATE_OPERATINGSYSTEM) {
			while (true) {
				TEST_LED1_ON();
				TEST_LED2_ON();
			}
		}

		// Checks current context default system state
		if (_CORE_CURRENT_CONTEXT->DEFAULT_SYSTEM_STATE != SYSTEMSTATE_PARTITIONERRORHANDLER) {
			while (true) {
				TEST_LED1_ON();
				TEST_LED2_ON();
			}
		}

		// Exits core
		EXIT_CORE();

		// Stops process
		STOP(ERROR_STATUS.FAILED_PROCESS_ID, &RETURN_CODE);
		if ((RETURN_CODE != NO_ERROR) && (RETURN_CODE != NO_ACTION)) {
			while (true) {
			}
		}

		// Starts process
		START(ERROR_STATUS.FAILED_PROCESS_ID, &RETURN_CODE);
		if ((RETURN_CODE != NO_ERROR) && (RETURN_CODE != NO_ACTION)) {
			while (true) {
			}
		}
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_ERRORHANDLER_INITIALIZATION
	// Enters core
	ENTER_CORE();

	// Checks current context system state
	if (_CORE_CURRENT_CONTEXT->SYSTEM_STATE != SYSTEMSTATE_OPERATINGSYSTEM) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Checks current context default system state
	if (_CORE_CURRENT_CONTEXT->DEFAULT_SYSTEM_STATE != SYSTEMSTATE_PARTITIONERRORHANDLER) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Exits core
	EXIT_CORE();
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_ERRORHANDLER_TERMINATION
	// Enters core
	ENTER_CORE();

	// Checks current context system state
	if (_CORE_CURRENT_CONTEXT->SYSTEM_STATE != SYSTEMSTATE_OPERATINGSYSTEM) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Checks current context default system state
	if (_CORE_CURRENT_CONTEXT->DEFAULT_SYSTEM_STATE != SYSTEMSTATE_PARTITIONERRORHANDLER) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Exits core
	EXIT_CORE();

	// Raises application error
	RAISE_APPLICATION_ERROR(APPLICATION_ERROR, (MESSAGE_ADDR_TYPE) "FROM PARTITION1 ERROR HANDLER", 29, &RETURN_CODE);
	if (RETURN_CODE != NO_ERROR) {
		while (true) {
		}
	}
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_ERRORHANDLER_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_HEALTHMONITORINGCALLBACK_CODE
	// Enters core
	ENTER_CORE();

	// Checks current context system state
	if (_CORE_CURRENT_CONTEXT->SYSTEM_STATE != SYSTEMSTATE_OPERATINGSYSTEM) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Checks current context default system state
	if (_CORE_CURRENT_CONTEXT->DEFAULT_SYSTEM_STATE != SYSTEMSTATE_PARTITIONHEALTHMONITORINGCALLBACK) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Exits core
	EXIT_CORE();

	// Raises application error
	RAISE_APPLICATION_ERROR(APPLICATION_ERROR, (MESSAGE_ADDR_TYPE) "FROM PARTITION1 HM CALLBACK", 27, &RETURN_CODE);
	if (RETURN_CODE != NO_ERROR) {
		while (true) {
		}
	}
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_HEALTHMONITORINGCALLBACK_VARIABLES
	RETURN_CODE_TYPE RETURN_CODE;
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_IDLEPROCESS_CODE
		// Enters core
		ENTER_CORE();

		// Checks current context system state
		if (_CORE_CURRENT_CONTEXT->SYSTEM_STATE != SYSTEMSTATE_OPERATINGSYSTEM) {
			while (true) {
				TEST_LED1_ON();
				TEST_LED2_ON();
			}
		}

		// Checks current context default system state
		if (_CORE_CURRENT_CONTEXT->DEFAULT_SYSTEM_STATE != SYSTEMSTATE_PARTITIONIDLEPROCESS) {
			while (true) {
				TEST_LED1_ON();
				TEST_LED2_ON();
			}
		}

		// Exits core
		EXIT_CORE();
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_IDLEPROCESS_INITIALIZATION
	// Enters core
	ENTER_CORE();

	// Checks current context system state
	if (_CORE_CURRENT_CONTEXT->SYSTEM_STATE != SYSTEMSTATE_OPERATINGSYSTEM) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Checks current context default system state
	if (_CORE_CURRENT_CONTEXT->DEFAULT_SYSTEM_STATE != SYSTEMSTATE_PARTITIONIDLEPROCESS) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Exits core
	EXIT_CORE();
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_AFTER_SUSPENSION_CODE
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_BEFORE_SUSPENSION_CODE
		// Enters core
		ENTER_CORE();

		// Checks current context system state
		if (_CORE_CURRENT_CONTEXT->SYSTEM_STATE != SYSTEMSTATE_OPERATINGSYSTEM) {
			while (true) {
				TEST_LED1_ON();
				TEST_LED2_ON();
			}
		}

		// Checks current context default system state
		if (_CORE_CURRENT_CONTEXT->DEFAULT_SYSTEM_STATE != SYSTEMSTATE_PROCESS) {
			while (true) {
				TEST_LED1_ON();
				TEST_LED2_ON();
			}
		}

		// Exits core
		EXIT_CORE();

		// Counts
		UI32_COUNTER1++;

		// Verifies counter
		if (UI32_COUNTER1 == 4) {

			// Misses deadline
			while (true) {
			}
		}
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_INITIALIZATION
	// Enters core
	ENTER_CORE();

	// Checks current context system state
	if (_CORE_CURRENT_CONTEXT->SYSTEM_STATE != SYSTEMSTATE_OPERATINGSYSTEM) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Checks current context default system state
	if (_CORE_CURRENT_CONTEXT->DEFAULT_SYSTEM_STATE != SYSTEMSTATE_PROCESS) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Exits core
	EXIT_CORE();
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_VARIABLES
	portUINT32 UI32_COUNTER1 = 0;
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_AFTER_SUSPENSION_CODE
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_BEFORE_SUSPENSION_CODE
		// Enters core
		ENTER_CORE();

		// Checks current context system state
		if (_CORE_CURRENT_CONTEXT->SYSTEM_STATE != SYSTEMSTATE_OPERATINGSYSTEM) {
			while (true) {
				TEST_LED1_ON();
				TEST_LED2_ON();
			}
		}

		// Checks current context default system state
		if (_CORE_CURRENT_CONTEXT->DEFAULT_SYSTEM_STATE != SYSTEMSTATE_PROCESS) {
			while (true) {
				TEST_LED1_ON();
				TEST_LED2_ON();
			}
		}

		// Exits core
		EXIT_CORE();
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_INITIALIZATION
	// Enters core
	ENTER_CORE();

	// Checks current context system state
	if (_CORE_CURRENT_CONTEXT->SYSTEM_STATE != SYSTEMSTATE_OPERATINGSYSTEM) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Checks current context default system state
	if (_CORE_CURRENT_CONTEXT->DEFAULT_SYSTEM_STATE != SYSTEMSTATE_PROCESS) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Exits core
	EXIT_CORE();
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DEFAULTPROCESS_INITIALIZATION
	// Enters core
	ENTER_CORE();

	// Checks current context system state
	if (_CORE_CURRENT_CONTEXT->SYSTEM_STATE != SYSTEMSTATE_OPERATINGSYSTEM) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Checks current context default system state
	if (_CORE_CURRENT_CONTEXT->DEFAULT_SYSTEM_STATE != SYSTEMSTATE_PARTITIONDEFAULTPROCESS) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Exits core
	EXIT_CORE();
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_ERRORHANDLER_CODE
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_ERRORHANDLER_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_ERRORHANDLER_TERMINATION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_ERRORHANDLER_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_HEALTHMONITORINGCALLBACK_CODE
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_HEALTHMONITORINGCALLBACK_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_IDLEPROCESS_CODE
		// Enters core
		ENTER_CORE();

		// Checks current context system state
		if (_CORE_CURRENT_CONTEXT->SYSTEM_STATE != SYSTEMSTATE_OPERATINGSYSTEM) {
			while (true) {
				TEST_LED1_ON();
				TEST_LED2_ON();
			}
		}

		// Checks current context default system state
		if (_CORE_CURRENT_CONTEXT->DEFAULT_SYSTEM_STATE != SYSTEMSTATE_PARTITIONIDLEPROCESS) {
			while (true) {
				TEST_LED1_ON();
				TEST_LED2_ON();
			}
		}

		// Exits core
		EXIT_CORE();
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_IDLEPROCESS_INITIALIZATION
	// Enters core
	ENTER_CORE();

	// Checks current context system state
	if (_CORE_CURRENT_CONTEXT->SYSTEM_STATE != SYSTEMSTATE_OPERATINGSYSTEM) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Checks current context default system state
	if (_CORE_CURRENT_CONTEXT->DEFAULT_SYSTEM_STATE != SYSTEMSTATE_PARTITIONIDLEPROCESS) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Exits core
	EXIT_CORE();
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DEFAULTPROCESS_INITIALIZATION
	// Enters core
	ENTER_CORE();

	// Checks current context system state
	if (_CORE_CURRENT_CONTEXT->SYSTEM_STATE != SYSTEMSTATE_OPERATINGSYSTEM) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Checks current context default system state
	if (_CORE_CURRENT_CONTEXT->DEFAULT_SYSTEM_STATE != SYSTEMSTATE_PARTITIONDEFAULTPROCESS) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Exits core
	EXIT_CORE();
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_ERRORHANDLER_CODE
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_ERRORHANDLER_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_ERRORHANDLER_TERMINATION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_ERRORHANDLER_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_HEALTHMONITORINGCALLBACK_CODE
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_HEALTHMONITORINGCALLBACK_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_IDLEPROCESS_CODE
		// Enters core
		ENTER_CORE();

		// Checks current context system state
		if (_CORE_CURRENT_CONTEXT->SYSTEM_STATE != SYSTEMSTATE_OPERATINGSYSTEM) {
			while (true) {
				TEST_LED1_ON();
				TEST_LED2_ON();
			}
		}

		// Checks current context default system state
		if (_CORE_CURRENT_CONTEXT->DEFAULT_SYSTEM_STATE != SYSTEMSTATE_PARTITIONIDLEPROCESS) {
			while (true) {
				TEST_LED1_ON();
				TEST_LED2_ON();
			}
		}

		// Exits core
		EXIT_CORE();
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_IDLEPROCESS_INITIALIZATION
	// Enters core
	ENTER_CORE();

	// Checks current context system state
	if (_CORE_CURRENT_CONTEXT->SYSTEM_STATE != SYSTEMSTATE_OPERATINGSYSTEM) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Checks current context default system state
	if (_CORE_CURRENT_CONTEXT->DEFAULT_SYSTEM_STATE != SYSTEMSTATE_PARTITIONIDLEPROCESS) {
		while (true) {
			TEST_LED1_ON();
			TEST_LED2_ON();
		}
	}

	// Exits core
	EXIT_CORE();
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START PERIODIC_WAIT_ERROR_HANDLING_CODE
			while (true) {
			}
SNIPPET_END
SNIPPET_START RUN_SYSTEM_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START SET_MODULE_MODE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START SET_PARTITION_MODE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START STARTUP_MODULE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START STARTUP_SYSTEM_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START START_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START SYSTEM_DEFAULTMODULE_INITIALIZATION
	// Starts up test
	TEST_STARTUP();
SNIPPET_END
SNIPPET_START SYSTEM_DEFAULTMODULE_VARIABLES
SNIPPET_END
SNIPPET_START SYSTEM_DESCRIPTION
SNIPPET_END
SNIPPET_START SYSTEM_FUNCTIONS
SNIPPET_END
SNIPPET_START SYSTEM_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START SYSTEM_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START SYSTEM_INCLUDES
SNIPPET_END
MASK_END
