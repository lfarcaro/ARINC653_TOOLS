MASK_START
SNIPPET_START CREATE_PARTITION_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START CREATE_PROCESS_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START GLOBAL_INCLUDES
// Test include
#include "test.h"

// Core includes
#include "arinc653_core.h"
SNIPPET_END
SNIPPET_START MODULE_MODULE_DEFAULTPARTITION_INITIALIZATION
SNIPPET_END
SNIPPET_START MODULE_MODULE_DEFAULTPARTITION_VARIABLES
	portBYTE COMMAND;
SNIPPET_END
SNIPPET_START MODULE_MODULE_DESCRIPTION
SNIPPET_END
SNIPPET_START MODULE_MODULE_FUNCTIONS
SNIPPET_END
SNIPPET_START MODULE_MODULE_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START MODULE_MODULE_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START MODULE_MODULE_IDLEPARTITION_CODE
		// Sets LEDs pattern
		TEST_LED1_OFF();
		TEST_LED2_OFF();

		// Handles reset command
		if ((CONSOLE_READ_BYTE(&COMMAND)) && (COMMAND == 0)) {
			PORT_RESTARTMODULE();
		}
SNIPPET_END
SNIPPET_START MODULE_MODULE_IDLEPARTITION_INITIALIZATION
SNIPPET_END
SNIPPET_START MODULE_MODULE_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DEFAULTPROCESS_INITIALIZATION
	// Starts up resource priority queue
	PRIORITYQUEUE_STARTUP(&REC_RESOURCE, true, false);
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_GLOBAL_VARIABLES
// Resource priority queue
priorityqueueRECORD REC_RESOURCE;
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_IDLEPROCESS_CODE
		// Sets LEDs pattern
		TEST_LED1_OFF();
		TEST_LED2_OFF();
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_IDLEPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_AFTER_SUSPENSION_CODE
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_BEFORE_SUSPENSION_CODE
		// Waits for resource
		WAIT_RESOURCE(PARTITION_STATUS.IDENTIFIER, PROCESS1_PROCESS_ID, &REC_RESOURCE, 500000000, &RETURN_CODE);
		if ((RETURN_CODE != NO_ERROR) && (RETURN_CODE != TIMED_OUT)) {
			while (true) {
			}
		}

		// Sets LEDs pattern for some time
		for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_SMALL; UI32_COUNTER1++) {
			TEST_LED1_ON();
			TEST_LED2_OFF();
		}
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_INITIALIZATION
	GET_PARTITION_STATUS(&PARTITION_STATUS, &RETURN_CODE);
	if (RETURN_CODE != NO_ERROR) {
		while (true) {
		}
	}
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_VARIABLES
	RETURN_CODE_TYPE RETURN_CODE;
	PARTITION_STATUS_TYPE PARTITION_STATUS;
	portUINT32 UI32_COUNTER1 = 0;
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_AFTER_SUSPENSION_CODE
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_BEFORE_SUSPENSION_CODE
		// Sets LEDs pattern for some time
		for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_SMALL; UI32_COUNTER1++) {
			TEST_LED1_OFF();
			TEST_LED2_ON();
		}

		// Counts
		UI32_COUNTER2++;

		// Verifies counter
		if (UI32_COUNTER2 == 4) {

			// Signals resource
			SIGNAL_RESOURCE(PARTITION_STATUS.IDENTIFIER, &REC_RESOURCE, true, &RETURN_CODE);
			if ((RETURN_CODE != NO_ERROR) && (RETURN_CODE != NO_ACTION)) {
				while (true) {
				}
			}

			// Resets counter
			UI32_COUNTER2 = 0;
		}

		// Waits
		TIMED_WAIT(250000000, &RETURN_CODE);
		if (RETURN_CODE != NO_ERROR) {
			while (true) {
			}
		}
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_INITIALIZATION
	GET_PARTITION_STATUS(&PARTITION_STATUS, &RETURN_CODE);
	if (RETURN_CODE != NO_ERROR) {
		while (true) {
		}
	}
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_VARIABLES
	RETURN_CODE_TYPE RETURN_CODE;
	PARTITION_STATUS_TYPE PARTITION_STATUS;
	portUINT32 UI32_COUNTER1 = 0;
	portUINT32 UI32_COUNTER2 = 0;
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DEFAULTPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_IDLEPROCESS_CODE
		// Sets LEDs pattern
		TEST_LED1_OFF();
		TEST_LED2_OFF();
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_IDLEPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DEFAULTPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_IDLEPROCESS_CODE
		// Sets LEDs pattern
		TEST_LED1_OFF();
		TEST_LED2_OFF();
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_IDLEPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START RUN_SYSTEM_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START SET_MODULE_MODE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START SET_PARTITION_MODE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START STARTUP_MODULE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START STARTUP_SYSTEM_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START START_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START SYSTEM_DEFAULTMODULE_INITIALIZATION
	// Starts up test
	TEST_STARTUP();
SNIPPET_END
SNIPPET_START SYSTEM_DEFAULTMODULE_VARIABLES
SNIPPET_END
SNIPPET_START SYSTEM_DESCRIPTION
SNIPPET_END
SNIPPET_START SYSTEM_FUNCTIONS
SNIPPET_END
SNIPPET_START SYSTEM_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START SYSTEM_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START SYSTEM_INCLUDES
SNIPPET_END
MASK_END
