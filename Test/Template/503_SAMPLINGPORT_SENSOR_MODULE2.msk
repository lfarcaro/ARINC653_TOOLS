MASK_START
SNIPPET_START CREATE_PARTITION_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START CREATE_PROCESS_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START CREATE_SAMPLING_PORT_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START GLOBAL_INCLUDES
// Test include
#include "test.h"
SNIPPET_END
SNIPPET_START MODULE_MODULE_DEFAULTPARTITION_INITIALIZATION
SNIPPET_END
SNIPPET_START MODULE_MODULE_DEFAULTPARTITION_VARIABLES
	portBYTE COMMAND;
SNIPPET_END
SNIPPET_START MODULE_MODULE_DESCRIPTION
SNIPPET_END
SNIPPET_START MODULE_MODULE_FUNCTIONS
SNIPPET_END
SNIPPET_START MODULE_MODULE_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START MODULE_MODULE_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START MODULE_MODULE_IDLEPARTITION_CODE
		// Sets LEDs pattern
		TEST_LED1_OFF();
		TEST_LED2_OFF();

		// Handles reset command
		if ((CONSOLE_READ_BYTE(&COMMAND)) && (COMMAND == 0)) {
			PORT_RESTARTMODULE();
		}
SNIPPET_END
SNIPPET_START MODULE_MODULE_IDLEPARTITION_INITIALIZATION
SNIPPET_END
SNIPPET_START MODULE_MODULE_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DEFAULTPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_HEALTHMONITORINGCALLBACK_CODE
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_HEALTHMONITORINGCALLBACK_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_IDLEPROCESS_CODE
		// Sets LEDs pattern
		TEST_LED1_OFF();
		TEST_LED2_OFF();
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_IDLEPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_AFTER_SUSPENSION_CODE
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_BEFORE_SUSPENSION_CODE
		// Reads sampling message
		READ_SAMPLING_MESSAGE(SENSOR_D_SAMPLINGPORT_ID, MESSAGE, &LENGTH, &VALIDITY, &RETURN_CODE);
		if ((RETURN_CODE != NO_ERROR) && (RETURN_CODE != NO_ACTION)) {
			while (true) {
			}
		}

		// Verifies validity
		if (VALIDITY == VALID) {

			// Verifies length
			if (LENGTH == 4) {

				// Reads sample
				SAMPLE = (MESSAGE[0] << 24) | (MESSAGE[1] << 16) | (MESSAGE[2] << 8) | (MESSAGE[3] << 0);

				// Sets PWM duty cycle
				EHRPWMLoadCMPB(SOC_EPWM_1_REGS, SAMPLE, EHRPWM_SHADOW_WRITE_DISABLE, EHRPWM_COMPB_NO_LOAD, EHRPWM_CMPCTL_OVERWR_SH_FL);

				// Sets LEDs pattern for some time
				for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_TINYSMALL; UI32_COUNTER1++) {
					TEST_LED1_ON();
					TEST_LED2_OFF();
				}
			} else {

				// Sets PWM duty cycle
				EHRPWMLoadCMPB(SOC_EPWM_1_REGS, 0, EHRPWM_SHADOW_WRITE_DISABLE, EHRPWM_COMPB_NO_LOAD, EHRPWM_CMPCTL_OVERWR_SH_FL);

				// Sets LEDs pattern for some time
				for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_TINYSMALL; UI32_COUNTER1++) {
					TEST_LED1_OFF();
					TEST_LED2_ON();
				}
			}
		} else {

			// Sets PWM duty cycle
			EHRPWMLoadCMPB(SOC_EPWM_1_REGS, 0, EHRPWM_SHADOW_WRITE_DISABLE, EHRPWM_COMPB_NO_LOAD, EHRPWM_CMPCTL_OVERWR_SH_FL);

			// Sets LEDs pattern for some time
			for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_TINYSMALL; UI32_COUNTER1++) {
				TEST_LED1_OFF();
				TEST_LED2_ON();
			}
		}
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_INITIALIZATION
	// Configuration
	#define EHRPWM_CLOCK 24000000
	#define EHRPWM_CLOCKPRESCALER 8
	#define EHRPWM_PERIOD 4096

	// Configures PWMSS clock
	PWMSSModuleClkConfig(1);

	// Configures EHRPWM pins
	HWREG(SOC_CONTROL_REGS + CONTROL_CONF_GPMC_A(2)) = CONTROL_CONF_MUXMODE(6);

	// Enables EHRPWM clock
	EHRPWMClockEnable(SOC_PWMSS1_REGS);

	// Enables TB clock
	PWMSSTBClkEnable(1);

	// Configures clock frequency
	EHRPWMTimebaseClkConfig(SOC_EPWM_1_REGS, EHRPWM_CLOCK / EHRPWM_CLOCKPRESCALER, EHRPWM_CLOCK);

	// Configures period
	EHRPWMPWMOpFreqSet(SOC_EPWM_1_REGS, EHRPWM_CLOCK / EHRPWM_CLOCKPRESCALER, (EHRPWM_CLOCK / EHRPWM_CLOCKPRESCALER) / EHRPWM_PERIOD, EHRPWM_COUNT_UP, EHRPWM_SHADOW_WRITE_ENABLE);

	// Disables syncout
	EHRPWMSyncOutModeSet(SOC_EPWM_1_REGS, EHRPWM_SYNCOUT_DISABLE);

	// Configures emulation behavior
	EHRPWMTBEmulationModeSet(SOC_EPWM_1_REGS, EHRPWM_FREE_RUN);

	// Loads CMPA value
	EHRPWMLoadCMPA(SOC_EPWM_1_REGS, 0, EHRPWM_SHADOW_WRITE_ENABLE, EHRPWM_COMPA_NO_LOAD, EHRPWM_CMPCTL_OVERWR_SH_FL);

	// Loads CMPB value
	EHRPWMLoadCMPB(SOC_EPWM_1_REGS, 0, EHRPWM_SHADOW_WRITE_ENABLE, EHRPWM_COMPB_NO_LOAD, EHRPWM_CMPCTL_OVERWR_SH_FL);

	// Toggle when CTR = CMPA
	EHRPWMConfigureAQActionOnA(SOC_EPWM_1_REGS, EHRPWM_AQCTLB_ZRO_DONOTHING, EHRPWM_AQCTLB_PRD_DONOTHING, EHRPWM_AQCTLB_CAU_EPWMXBHIGH, EHRPWM_AQCTLB_CAD_DONOTHING, EHRPWM_AQCTLB_CBU_EPWMXBLOW, EHRPWM_AQCTLB_CBD_DONOTHING, EHRPWM_AQSFRC_ACTSFB_DONOTHING);

	// Disables chopper sub-module
	EHRPWMChopperDisable(SOC_EPWM_1_REGS);
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_VARIABLES
	portUINT32 UI32_COUNTER1 = 0;
	portCHARACTER MESSAGE[4];
	MESSAGE_SIZE_TYPE LENGTH;
	VALIDITY_TYPE VALIDITY;
	unsigned int SAMPLE;
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DEFAULTPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_HEALTHMONITORINGCALLBACK_CODE
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_HEALTHMONITORINGCALLBACK_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_IDLEPROCESS_CODE
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_IDLEPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DEFAULTPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_HEALTHMONITORINGCALLBACK_CODE
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_HEALTHMONITORINGCALLBACK_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_IDLEPROCESS_CODE
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_IDLEPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START PERIODIC_WAIT_ERROR_HANDLING_CODE
			while (true) {
			}
SNIPPET_END
SNIPPET_START RUN_SYSTEM_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START SET_MODULE_MODE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START SET_PARTITION_MODE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START STARTUP_MODULE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START STARTUP_SYSTEM_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START START_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START SYSTEM_DEFAULTMODULE_INITIALIZATION
	// Starts up test
	TEST_STARTUP();
SNIPPET_END
SNIPPET_START SYSTEM_DEFAULTMODULE_VARIABLES
SNIPPET_END
SNIPPET_START SYSTEM_DESCRIPTION
SNIPPET_END
SNIPPET_START SYSTEM_FUNCTIONS
SNIPPET_END
SNIPPET_START SYSTEM_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START SYSTEM_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START SYSTEM_INCLUDES
SNIPPET_END
MASK_END
