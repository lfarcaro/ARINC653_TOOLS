MASK_START
SNIPPET_START CREATE_PARTITION_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START CREATE_PROCESS_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START CREATE_SAMPLING_PORT_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START GLOBAL_INCLUDES
// Test include
#include "test.h"
SNIPPET_END
SNIPPET_START MODULE_MODULE_DEFAULTPARTITION_INITIALIZATION
SNIPPET_END
SNIPPET_START MODULE_MODULE_DEFAULTPARTITION_VARIABLES
	portBYTE COMMAND;
SNIPPET_END
SNIPPET_START MODULE_MODULE_DESCRIPTION
SNIPPET_END
SNIPPET_START MODULE_MODULE_FUNCTIONS
SNIPPET_END
SNIPPET_START MODULE_MODULE_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START MODULE_MODULE_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START MODULE_MODULE_IDLEPARTITION_CODE
		// Sets LEDs pattern
		TEST_LED1_OFF();
		TEST_LED2_OFF();

		// Handles reset command
		if ((CONSOLE_READ_BYTE(&COMMAND)) && (COMMAND == 0)) {
			PORT_RESTARTMODULE();
		}
SNIPPET_END
SNIPPET_START MODULE_MODULE_IDLEPARTITION_INITIALIZATION
SNIPPET_END
SNIPPET_START MODULE_MODULE_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DEFAULTPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_HEALTHMONITORINGCALLBACK_CODE
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_HEALTHMONITORINGCALLBACK_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_IDLEPROCESS_CODE
		// Sets LEDs pattern
		TEST_LED1_OFF();
		TEST_LED2_OFF();
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_IDLEPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_AFTER_SUSPENSION_CODE
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_BEFORE_SUSPENSION_CODE
		// Read last sample loop
		while (TSCADCFIFOWordCountRead(SOC_ADC_TSC_0_REGS, TSCADC_FIFO_0) > 0) {
			SAMPLE = TSCADCFIFOADCDataRead(SOC_ADC_TSC_0_REGS, TSCADC_FIFO_0);
		}

		// Prepares message
		MESSAGE[0] = (SAMPLE >> 24) & 0xFF;
		MESSAGE[1] = (SAMPLE >> 16) & 0xFF;
		MESSAGE[2] = (SAMPLE >> 8) & 0xFF;
		MESSAGE[3] = (SAMPLE >> 0) & 0xFF;

		// Writes sampling message
		WRITE_SAMPLING_MESSAGE(SENSOR_S_SAMPLINGPORT_ID, (MESSAGE_ADDR_TYPE) MESSAGE, 4, &RETURN_CODE);
		if (RETURN_CODE != NO_ERROR) {
			while (true) {
			}
		}

		// Sets LEDs pattern for some time
		for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_TINYSMALL; UI32_COUNTER1++) {
			TEST_LED1_ON();
			TEST_LED2_OFF();
		}
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_INITIALIZATION
	// Configuration
	#define TSCADC_CLOCK 24000000
	#define TSCADC_FREQUENCY 3000000

	// Configures ADC clock
	TSCADCModuleClkConfig();

	// Configures ADC pins
	HWREG(SOC_CONTROL_REGS + CONTROL_CONF_AIN5) = CONTROL_CONF_AIN5_CONF_AIN5_RXACTIVE;

	// Configures ADC frequency
	TSCADCConfigureAFEClock(SOC_ADC_TSC_0_REGS, TSCADC_CLOCK, TSCADC_FREQUENCY);

	// Enables transistor bias
	TSCADCTSTransistorConfig(SOC_ADC_TSC_0_REGS, TSCADC_TRANSISTOR_ENABLE);

	// Disables step configuration registers write protection
	TSCADCStepConfigProtectionDisable(SOC_ADC_TSC_0_REGS);

	// Configures step to single ended operation mode
	TSCADCTSStepOperationModeControl(SOC_ADC_TSC_0_REGS, TSCADC_SINGLE_ENDED_OPER_MODE, 0);

	// Configures step to select channel and reference voltages
	TSCADCTSStepConfig(SOC_ADC_TSC_0_REGS, 0, TSCADC_NEGATIVE_REF_VSSA, TSCADC_POSITIVE_INP_CHANNEL6, TSCADC_NEGATIVE_INP_CHANNEL6, TSCADC_POSITIVE_REF_VDDA);

	// Selects step FIFO
	TSCADCTSStepFIFOSelConfig(SOC_ADC_TSC_0_REGS, 0, TSCADC_FIFO_0);

	// Configures step to continuous mode
	TSCADCTSStepModeConfig(SOC_ADC_TSC_0_REGS, 0, TSCADC_CONTINIOUS_SOFTWARE_ENABLED);

	// Sets general purpose mode
	TSCADCTSModeConfig(SOC_ADC_TSC_0_REGS, TSCADC_GENERAL_PURPOSE_MODE);

	// Enables step 1
	TSCADCConfigureStepEnable(SOC_ADC_TSC_0_REGS, 1, true);

	// Enables module
	TSCADCModuleStateSet(SOC_ADC_TSC_0_REGS, TSCADC_MODULE_ENABLE);
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_VARIABLES
	portUINT32 UI32_COUNTER1 = 0;
	portCHARACTER MESSAGE[4];
	unsigned int SAMPLE;
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DEFAULTPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_HEALTHMONITORINGCALLBACK_CODE
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_HEALTHMONITORINGCALLBACK_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_IDLEPROCESS_CODE
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_IDLEPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DEFAULTPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_HEALTHMONITORINGCALLBACK_CODE
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_HEALTHMONITORINGCALLBACK_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_IDLEPROCESS_CODE
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_IDLEPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START PERIODIC_WAIT_ERROR_HANDLING_CODE
			while (true) {
			}
SNIPPET_END
SNIPPET_START RUN_SYSTEM_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START SET_MODULE_MODE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START SET_PARTITION_MODE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START STARTUP_MODULE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START STARTUP_SYSTEM_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START START_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START SYSTEM_DEFAULTMODULE_INITIALIZATION
	// Starts up test
	TEST_STARTUP();
SNIPPET_END
SNIPPET_START SYSTEM_DEFAULTMODULE_VARIABLES
SNIPPET_END
SNIPPET_START SYSTEM_DESCRIPTION
SNIPPET_END
SNIPPET_START SYSTEM_FUNCTIONS
SNIPPET_END
SNIPPET_START SYSTEM_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START SYSTEM_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START SYSTEM_INCLUDES
SNIPPET_END
MASK_END
