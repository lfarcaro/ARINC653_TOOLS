MASK_START
SNIPPET_START CREATE_PARTITION_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START CREATE_PROCESS_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START GLOBAL_INCLUDES
// Test include
#include "test.h"
SNIPPET_END
SNIPPET_START MODULE_MODULE_DEFAULTPARTITION_INITIALIZATION
SNIPPET_END
SNIPPET_START MODULE_MODULE_DEFAULTPARTITION_VARIABLES
	portBYTE COMMAND;
SNIPPET_END
SNIPPET_START MODULE_MODULE_DESCRIPTION
SNIPPET_END
SNIPPET_START MODULE_MODULE_FUNCTIONS
SNIPPET_END
SNIPPET_START MODULE_MODULE_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START MODULE_MODULE_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START MODULE_MODULE_IDLEPARTITION_CODE
		// Sets LEDs pattern
		TEST_LED1_OFF();
		TEST_LED2_OFF();

		// Handles reset command
		if ((CONSOLE_READ_BYTE(&COMMAND)) && (COMMAND == 0)) {
			PORT_RESTARTMODULE();
		}
SNIPPET_END
SNIPPET_START MODULE_MODULE_IDLEPARTITION_INITIALIZATION
SNIPPET_END
SNIPPET_START MODULE_MODULE_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DEFAULTPROCESS_INITIALIZATION
	// Creates blackboard
	CREATE_BLACKBOARD((BLACKBOARD_NAME_TYPE) "BLACKBOARD1", 16, &BLACKBOARD_ID, &RETURN_CODE);
	if (RETURN_CODE != NO_ERROR) {
		while (true) {
		}
	}
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DEFAULTPROCESS_VARIABLES
	BLACKBOARD_STATUS_TYPE BLACKBOARD_STATUS;
	portUINT32 UI32_COUNTER1 = 0;
	portBOOLEAN BOOL_SWITCH = true;
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_GLOBAL_VARIABLES
// Blackboard identifier
static BLACKBOARD_ID_TYPE BLACKBOARD_ID;
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_IDLEPROCESS_CODE
		// Sets LEDs pattern
		TEST_LED1_OFF();
		TEST_LED2_OFF();

		// Gets blackboard identifier
		GET_BLACKBOARD_ID((BLACKBOARD_NAME_TYPE) "BLACKBOARD1", &BLACKBOARD_ID, &RETURN_CODE);
		if (RETURN_CODE != NO_ERROR) {
			while (true) {
			}
		}

		// Counts
		UI32_COUNTER1++;

		// Verifies counter
		if (UI32_COUNTER1 == TEST_COUNTER_MEDIUM) {

			// Verifies switch flag
			if (BOOL_SWITCH) {

				// Displays blackboard
				DISPLAY_BLACKBOARD(BLACKBOARD_ID, (MESSAGE_ADDR_TYPE) "TEST", 4, &RETURN_CODE);
				if (RETURN_CODE != NO_ERROR) {
					while (true) {
					}
				}

				// Gets blackboard status
				GET_BLACKBOARD_STATUS(BLACKBOARD_ID, &BLACKBOARD_STATUS, &RETURN_CODE);
				if (RETURN_CODE != NO_ERROR) {
					while (true) {
					}
				}
				if (BLACKBOARD_STATUS.EMPTY_INDICATOR != OCCUPIED) {
					while (true) {
					}
				}
			} else {

				// Clears blackboard
				CLEAR_BLACKBOARD(BLACKBOARD_ID, &RETURN_CODE);
				if (RETURN_CODE != NO_ERROR) {
					while (true) {
					}
				}

				// Gets blackboard status
				GET_BLACKBOARD_STATUS(BLACKBOARD_ID, &BLACKBOARD_STATUS, &RETURN_CODE);
				if (RETURN_CODE != NO_ERROR) {
					while (true) {
					}
				}
				if (BLACKBOARD_STATUS.EMPTY_INDICATOR != EMPTY) {
					while (true) {
					}
				}
			}

			// Switches flag
			BOOL_SWITCH = !BOOL_SWITCH;

			// Resets counter
			UI32_COUNTER1 = 0;
		}
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_IDLEPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_AFTER_SUSPENSION_CODE
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_BEFORE_SUSPENSION_CODE
		// Reads blackboard
		READ_BLACKBOARD(BLACKBOARD_ID, INFINITE_TIME_VALUE, MESSAGE, &LENGTH, &RETURN_CODE);
		if (RETURN_CODE != NO_ERROR) {
			while (true) {
			}
		}
		if (LENGTH != 4) {
			while (true) {
			}
		}
		if ((MESSAGE[0] != 'T') || (MESSAGE[1] != 'E') || (MESSAGE[2] != 'S') || (MESSAGE[3] != 'T')) {
			while (true) {
			}
		}

		// Sets LEDs pattern for some time
		for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_SMALL; UI32_COUNTER1++) {
			TEST_LED1_ON();
			TEST_LED2_OFF();
		}
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_VARIABLES
	portUINT32 UI32_COUNTER1 = 0;
	portCHARACTER MESSAGE[16];
	MESSAGE_SIZE_TYPE LENGTH;
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_AFTER_SUSPENSION_CODE
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_BEFORE_SUSPENSION_CODE
		// Reads blackboard
		READ_BLACKBOARD(BLACKBOARD_ID, INFINITE_TIME_VALUE, MESSAGE, &LENGTH, &RETURN_CODE);
		if (RETURN_CODE != NO_ERROR) {
			while (true) {
			}
		}
		if (LENGTH != 4) {
			while (true) {
			}
		}
		if ((MESSAGE[0] != 'T') || (MESSAGE[1] != 'E') || (MESSAGE[2] != 'S') || (MESSAGE[3] != 'T')) {
			while (true) {
			}
		}

		// Sets LEDs pattern for some time
		for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_SMALL; UI32_COUNTER1++) {
			TEST_LED1_OFF();
			TEST_LED2_ON();
		}
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_VARIABLES
	portUINT32 UI32_COUNTER1 = 0;
	portCHARACTER MESSAGE[16];
	MESSAGE_SIZE_TYPE LENGTH;
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DEFAULTPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_IDLEPROCESS_CODE
		// Sets LEDs pattern
		TEST_LED1_OFF();
		TEST_LED2_OFF();
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_IDLEPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DEFAULTPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_IDLEPROCESS_CODE
		// Sets LEDs pattern
		TEST_LED1_OFF();
		TEST_LED2_OFF();
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_IDLEPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START PERIODIC_WAIT_ERROR_HANDLING_CODE
			while (true) {
			}
SNIPPET_END
SNIPPET_START RUN_SYSTEM_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START SET_MODULE_MODE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START SET_PARTITION_MODE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START STARTUP_MODULE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START STARTUP_SYSTEM_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START START_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START SYSTEM_DEFAULTMODULE_INITIALIZATION
	// Starts up test
	TEST_STARTUP();
SNIPPET_END
SNIPPET_START SYSTEM_DEFAULTMODULE_VARIABLES
SNIPPET_END
SNIPPET_START SYSTEM_DESCRIPTION
SNIPPET_END
SNIPPET_START SYSTEM_FUNCTIONS
SNIPPET_END
SNIPPET_START SYSTEM_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START SYSTEM_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START SYSTEM_INCLUDES
SNIPPET_END
MASK_END
