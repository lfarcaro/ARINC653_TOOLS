MASK_START
SNIPPET_START CREATE_PARTITION_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START CREATE_PROCESS_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START GLOBAL_INCLUDES
// Test include
#include "test.h"
SNIPPET_END
SNIPPET_START MODULE_MODULE_DEFAULTPARTITION_INITIALIZATION
SNIPPET_END
SNIPPET_START MODULE_MODULE_DEFAULTPARTITION_VARIABLES
	portBYTE COMMAND;
SNIPPET_END
SNIPPET_START MODULE_MODULE_DESCRIPTION
SNIPPET_END
SNIPPET_START MODULE_MODULE_FUNCTIONS
SNIPPET_END
SNIPPET_START MODULE_MODULE_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START MODULE_MODULE_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START MODULE_MODULE_IDLEPARTITION_CODE
		// Sets LEDs pattern
		TEST_LED1_OFF();
		TEST_LED2_OFF();

		// Handles reset command
		if ((CONSOLE_READ_BYTE(&COMMAND)) && (COMMAND == 0)) {
			PORT_RESTARTMODULE();
		}
SNIPPET_END
SNIPPET_START MODULE_MODULE_IDLEPARTITION_INITIALIZATION
SNIPPET_END
SNIPPET_START MODULE_MODULE_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DEFAULTPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_IDLEPROCESS_CODE
		// Sets LEDs pattern
		TEST_LED1_OFF();
		TEST_LED2_OFF();
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_IDLEPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_AFTER_SUSPENSION_CODE
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_BEFORE_SUSPENSION_CODE

		// Sets fixed value (for debugging)
		// UI32_COUNTER2 = 1;

		// Tracks process execution
		CONSOLE_PRINTF("%u PC P1 p1 Js\r\n", TRACK_READ());

		// Gets start time
		UI32_STARTTIME = TRACK_READ();

		// Selects counter value
		switch (UI32_COUNTER2) {
		case 0:
			for (UI32_COUNTER1 = 0; UI32_COUNTER1 < 1; UI32_COUNTER1++) {
				TEST_LED1_ON();
				TEST_LED2_OFF();
			}
			break;
		case 1:
			for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_TINY; UI32_COUNTER1++) {
				TEST_LED1_ON();
				TEST_LED2_OFF();
			}
			break;
		case 2:
			for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_TINYSMALL; UI32_COUNTER1++) {
				TEST_LED1_ON();
				TEST_LED2_OFF();
			}
			break;
		case 3:
			for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_SMALL; UI32_COUNTER1++) {
				TEST_LED1_ON();
				TEST_LED2_OFF();
			}
			break;
		case 4:
			for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_SMALLMEDIUM; UI32_COUNTER1++) {
				TEST_LED1_ON();
				TEST_LED2_OFF();
			}
			break;
		case 5:
			for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_MEDIUM; UI32_COUNTER1++) {
				TEST_LED1_ON();
				TEST_LED2_OFF();
			}
			break;
		case 6:
			for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_MEDIUMLARGE; UI32_COUNTER1++) {
				TEST_LED1_ON();
				TEST_LED2_OFF();
			}
			break;
		case 7:
			for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_LARGE; UI32_COUNTER1++) {
				TEST_LED1_ON();
				TEST_LED2_OFF();
			}
			break;
		case 8:
			for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_LARGEHUGE; UI32_COUNTER1++) {
				TEST_LED1_ON();
				TEST_LED2_OFF();
			}
			break;
		case 9:
			for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_HUGE; UI32_COUNTER1++) {
				TEST_LED1_ON();
				TEST_LED2_OFF();
			}

			// Resets counter
			UI32_COUNTER2 = 0;
			break;
		}

		// Gets end time
		UI32_ENDTIME = TRACK_READ();

		// Tracks calibration
		CONSOLE_PRINTF("%u PC P1 p1 Cs\r\n", UI32_STARTTIME);
		CONSOLE_PRINTF("%u PC P1 p1 Cf\r\n", UI32_ENDTIME);

		// Tracks process execution
		CONSOLE_PRINTF("%u PC P1 p1 Jf\r\n", TRACK_READ());

		// Increments counter
		UI32_COUNTER2++;
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_VARIABLES
	portUINT32 UI32_STARTTIME = 0;
	portUINT32 UI32_ENDTIME = 0;
	portUINT32 UI32_COUNTER1 = 0;
	portUINT32 UI32_COUNTER2 = 0;
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DEFAULTPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_IDLEPROCESS_CODE
		// Sets LEDs pattern
		TEST_LED1_OFF();
		TEST_LED2_OFF();
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_IDLEPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DEFAULTPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_IDLEPROCESS_CODE
		// Sets LEDs pattern
		TEST_LED1_OFF();
		TEST_LED2_OFF();
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_IDLEPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START PERIODIC_WAIT_ERROR_HANDLING_CODE
			while (true) {
			}
SNIPPET_END
SNIPPET_START RUN_SYSTEM_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START SET_MODULE_MODE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START SET_PARTITION_MODE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START STARTUP_MODULE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START STARTUP_SYSTEM_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START START_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START SYSTEM_DEFAULTMODULE_INITIALIZATION
	// Starts up test
	TEST_STARTUP();
SNIPPET_END
SNIPPET_START SYSTEM_DEFAULTMODULE_VARIABLES
SNIPPET_END
SNIPPET_START SYSTEM_DESCRIPTION
SNIPPET_END
SNIPPET_START SYSTEM_FUNCTIONS
SNIPPET_END
SNIPPET_START SYSTEM_GLOBAL_DEFINITIONS
SNIPPET_END
SNIPPET_START SYSTEM_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START SYSTEM_INCLUDES
SNIPPET_END
MASK_END
