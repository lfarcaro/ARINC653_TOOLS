ARTIFACT_START
MASK_START module.c
SNIPPET_START CREATE_PARTITION_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START GLOBAL_INCLUDES
// Test include
#include "test.h"
SNIPPET_END
SNIPPET_START MODULE_DEFAULTPARTITION_INITIALIZATION
	// Starts up test
	TEST_STARTUP();
SNIPPET_END
SNIPPET_START MODULE_DEFAULTPARTITION_VARIABLES
SNIPPET_END
SNIPPET_START MODULE_DESCRIPTION
SNIPPET_END
SNIPPET_START MODULE_FUNCTIONS
SNIPPET_END
SNIPPET_START MODULE_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START MODULE_IDLEPARTITION_CODE
		// Sets LEDs pattern
		TEST_LED1_OFF();
		TEST_LED2_OFF();
SNIPPET_END
SNIPPET_START MODULE_IDLEPARTITION_INITIALIZATION
SNIPPET_END
SNIPPET_START MODULE_INCLUDES
SNIPPET_END
SNIPPET_START SET_MODULE_MODE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START STARTUP_MODULE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START STARTUP_SYSTEM_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
MASK_END
MASK_START partition1.c
SNIPPET_START CREATE_PROCESS_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START CREATE_SAMPLING_PORT_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START GLOBAL_INCLUDES
// Test include
#include "test.h"
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DEFAULTPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_HEALTHMONITORINGCALLBACK_CODE
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_HEALTHMONITORINGCALLBACK_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_IDLEPROCESS_CODE
		// Sets LEDs pattern
		TEST_LED1_OFF();
		TEST_LED2_OFF();
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_IDLEPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_AFTER_SUSPENSION_CODE
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_BEFORE_SUSPENSION_CODE
		// Writes sampling message
		WRITE_SAMPLING_MESSAGE(SENSOR_S_SAMPLINGPORT_ID, (MESSAGE_ADDR_TYPE) "TEST", 4, &RETURN_CODE);
		if (RETURN_CODE != NO_ERROR) {
			while (true) {
			}
		}
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_AFTER_SUSPENSION_CODE
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_BEFORE_SUSPENSION_CODE
		// Reads sampling message
		READ_SAMPLING_MESSAGE(SENSOR_D_SAMPLINGPORT_ID, MESSAGE, &LENGTH, &VALIDITY, &RETURN_CODE);
		if ((RETURN_CODE != NO_ERROR) && (RETURN_CODE != NO_ACTION)) {
			while (true) {
			}
		}

		// Verifies validity
		if (VALIDITY == VALID) {

			// Verifies message
			if ((LENGTH == 4) && (MESSAGE[0] == 'T') && (MESSAGE[1] == 'E') && (MESSAGE[2] == 'S') && (MESSAGE[3] == 'T')) {

				// Sets LEDs pattern for some time
				for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_TINYSMALL; UI32_COUNTER1++) {
					TEST_LED1_ON();
					TEST_LED2_OFF();
				}
			}
		} else {

			// Sets LEDs pattern for some time
			for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_TINYSMALL; UI32_COUNTER1++) {
				TEST_LED1_OFF();
				TEST_LED2_ON();
			}
		}
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_VARIABLES
	portUINT32 UI32_COUNTER1 = 0;
	portCHARACTER MESSAGE[16];
	MESSAGE_SIZE_TYPE LENGTH;
	VALIDITY_TYPE VALIDITY;
SNIPPET_END
SNIPPET_START PERIODIC_WAIT_ERROR_HANDLING_CODE
			while (true) {
			}
SNIPPET_END
SNIPPET_START SET_PARTITION_MODE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START START_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
MASK_END
MASK_START partition2.c
SNIPPET_START CREATE_PROCESS_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START CREATE_SAMPLING_PORT_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START GLOBAL_INCLUDES
// Test include
#include "test.h"
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DEFAULTPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_HEALTHMONITORINGCALLBACK_CODE
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_HEALTHMONITORINGCALLBACK_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_IDLEPROCESS_CODE
		// Sets LEDs pattern
		TEST_LED1_OFF();
		TEST_LED2_OFF();
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_IDLEPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_PROCESS1_PROCESS_AFTER_SUSPENSION_CODE
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_PROCESS1_PROCESS_BEFORE_SUSPENSION_CODE
		// Writes sampling message
		WRITE_SAMPLING_MESSAGE(SENSOR_S_SAMPLINGPORT_ID, (MESSAGE_ADDR_TYPE) "TEST", 4, &RETURN_CODE);
		if (RETURN_CODE != NO_ERROR) {
			while (true) {
			}
		}
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_PROCESS1_PROCESS_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_PROCESS1_PROCESS_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_PROCESS1_PROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_PROCESS1_PROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_PROCESS2_PROCESS_AFTER_SUSPENSION_CODE
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_PROCESS2_PROCESS_BEFORE_SUSPENSION_CODE
		// Reads sampling message
		READ_SAMPLING_MESSAGE(SENSOR_D_SAMPLINGPORT_ID, MESSAGE, &LENGTH, &VALIDITY, &RETURN_CODE);
		if ((RETURN_CODE != NO_ERROR) && (RETURN_CODE != NO_ACTION)) {
			while (true) {
			}
		}

		// Verifies validity
		if (VALIDITY == VALID) {

			// Verifies message
			if ((LENGTH == 4) && (MESSAGE[0] == 'T') && (MESSAGE[1] == 'E') && (MESSAGE[2] == 'S') && (MESSAGE[3] == 'T')) {

				// Sets LEDs pattern for some time
				for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_TINYSMALL; UI32_COUNTER1++) {
					TEST_LED1_ON();
					TEST_LED2_OFF();
				}
			}
		} else {

			// Sets LEDs pattern for some time
			for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_TINYSMALL; UI32_COUNTER1++) {
				TEST_LED1_OFF();
				TEST_LED2_ON();
			}
		}
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_PROCESS2_PROCESS_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_PROCESS2_PROCESS_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_PROCESS2_PROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_PROCESS2_PROCESS_VARIABLES
	portUINT32 UI32_COUNTER1 = 0;
	portCHARACTER MESSAGE[16];
	MESSAGE_SIZE_TYPE LENGTH;
	VALIDITY_TYPE VALIDITY;
SNIPPET_END
SNIPPET_START PERIODIC_WAIT_ERROR_HANDLING_CODE
			while (true) {
			}
SNIPPET_END
SNIPPET_START SET_PARTITION_MODE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START START_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
MASK_END
MASK_START partition3.c
SNIPPET_START CREATE_PROCESS_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START CREATE_SAMPLING_PORT_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START GLOBAL_INCLUDES
// Test include
#include "test.h"
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DEFAULTPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_HEALTHMONITORINGCALLBACK_CODE
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_HEALTHMONITORINGCALLBACK_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_IDLEPROCESS_CODE
		// Sets LEDs pattern
		TEST_LED1_OFF();
		TEST_LED2_OFF();
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_IDLEPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_PROCESS1_PROCESS_AFTER_SUSPENSION_CODE
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_PROCESS1_PROCESS_BEFORE_SUSPENSION_CODE
		// Writes sampling message
		WRITE_SAMPLING_MESSAGE(SENSOR_S_SAMPLINGPORT_ID, (MESSAGE_ADDR_TYPE) "TEST", 4, &RETURN_CODE);
		if (RETURN_CODE != NO_ERROR) {
			while (true) {
			}
		}
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_PROCESS1_PROCESS_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_PROCESS1_PROCESS_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_PROCESS1_PROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_PROCESS1_PROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_PROCESS2_PROCESS_AFTER_SUSPENSION_CODE
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_PROCESS2_PROCESS_BEFORE_SUSPENSION_CODE
		// Reads sampling message
		READ_SAMPLING_MESSAGE(SENSOR_D_SAMPLINGPORT_ID, MESSAGE, &LENGTH, &VALIDITY, &RETURN_CODE);
		if ((RETURN_CODE != NO_ERROR) && (RETURN_CODE != NO_ACTION)) {
			while (true) {
			}
		}

		// Verifies validity
		if (VALIDITY == VALID) {

			// Verifies message
			if ((LENGTH == 4) && (MESSAGE[0] == 'T') && (MESSAGE[1] == 'E') && (MESSAGE[2] == 'S') && (MESSAGE[3] == 'T')) {

				// Sets LEDs pattern for some time
				for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_TINYSMALL; UI32_COUNTER1++) {
					TEST_LED1_ON();
					TEST_LED2_OFF();
				}
			}
		} else {

			// Sets LEDs pattern for some time
			for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_TINYSMALL; UI32_COUNTER1++) {
				TEST_LED1_OFF();
				TEST_LED2_ON();
			}
		}
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_PROCESS2_PROCESS_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_PROCESS2_PROCESS_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_PROCESS2_PROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_PROCESS2_PROCESS_VARIABLES
	portUINT32 UI32_COUNTER1 = 0;
	portCHARACTER MESSAGE[16];
	MESSAGE_SIZE_TYPE LENGTH;
	VALIDITY_TYPE VALIDITY;
SNIPPET_END
SNIPPET_START PERIODIC_WAIT_ERROR_HANDLING_CODE
			while (true) {
			}
SNIPPET_END
SNIPPET_START SET_PARTITION_MODE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START START_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
MASK_END
ARTIFACT_END
